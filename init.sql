-- Create the employees table
CREATE TABLE employees (
    id SERIAL PRIMARY KEY,
    first_name VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL,
    salary DECIMAL(10, 2) NOT NULL,
    department VARCHAR(255) NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Create a unique index to constrain uniqueness by first_name, department, email, and salary
CREATE UNIQUE INDEX employees_unique_idx ON employees (first_name, department, email, salary);



-- Enable the UUID extension for UUID generation
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- Users table
CREATE TABLE USERS (
	ID UUID DEFAULT UUID_GENERATE_V4 () PRIMARY KEY,
	NAME VARCHAR(255) NOT NULL,
	EMAIL VARCHAR(255) UNIQUE NOT NULL,
	PASSWORD_HASH VARCHAR(255) NOT NULL,
	CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Products table
CREATE TABLE PRODUCTS (
	ID UUID DEFAULT UUID_GENERATE_V4 () PRIMARY KEY,
	NAME VARCHAR(255) NOT NULL,
	DESCRIPTION TEXT,
	PRICE DECIMAL(10, 2) NOT NULL,
	STOCK INT DEFAULT 0 NOT NULL,
	CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Orders table
CREATE TABLE ORDERS (
	ID UUID DEFAULT UUID_GENERATE_V4 () PRIMARY KEY,
	USER_ID UUID NOT NULL,
	TOTAL_PRICE DECIMAL(10, 2) NOT NULL,
	STATUS VARCHAR(50) DEFAULT 'PENDING',
	CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	FOREIGN KEY (USER_ID) REFERENCES USERS (ID) ON DELETE CASCADE
);

-- Order Details table
CREATE TABLE ORDER_DETAILS (
	ID UUID DEFAULT UUID_GENERATE_V4 () PRIMARY KEY,
	ORDER_ID UUID NOT NULL,
	PRODUCT_ID UUID NOT NULL,
	QUANTITY INT NOT NULL,
	PRICE DECIMAL(10, 2) NOT NULL,
	FOREIGN KEY (ORDER_ID) REFERENCES ORDERS (ID) ON DELETE CASCADE,
	FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCTS (ID) ON DELETE CASCADE
);

-- Index for fast lookup on user email
CREATE UNIQUE INDEX IDX_USERS_EMAIL ON USERS (EMAIL);

-- Index for product name search
CREATE INDEX IDX_PRODUCTS_NAME ON PRODUCTS (NAME);

-- Index for order status
CREATE INDEX IDX_ORDERS_STATUS ON ORDERS (STATUS);

-- Composite index for order details to speed up joins
CREATE INDEX IDX_ORDER_DETAILS_ORDER_PRODUCT ON ORDER_DETAILS (ORDER_ID, PRODUCT_ID);

-- Insert users
INSERT INTO
	USERS (NAME, EMAIL, PASSWORD_HASH)
VALUES
	('Alice', 'alice@example.com', 'hashed_password_1'),
	('Bob', 'bob@example.com', 'hashed_password_2');

-- Insert products
INSERT INTO
	PRODUCTS (NAME, DESCRIPTION, PRICE, STOCK)
VALUES
	(
		'Laptop',
		'A high-performance laptop',
		1200.00,
		10
	),
	('Mouse', 'Wireless optical mouse', 25.00, 50),
	('Keyboard', 'Mechanical keyboard', 75.00, 30);

-- Insert orders
INSERT INTO
	ORDERS (USER_ID, TOTAL_PRICE, STATUS)
SELECT
	ID,
	1250.00,
	'COMPLETED'
FROM
	USERS
WHERE
	EMAIL = 'alice@example.com';

-- Insert order details
INSERT INTO
	ORDER_DETAILS (ORDER_ID, PRODUCT_ID, QUANTITY, PRICE)
SELECT
	O.ID,
	P.ID,
	1,
	1200.00
FROM
	ORDERS O,
	PRODUCTS P
WHERE
	O.TOTAL_PRICE = 1250.00
	AND P.NAME = 'Laptop';

INSERT INTO
	ORDER_DETAILS (ORDER_ID, PRODUCT_ID, QUANTITY, PRICE)
SELECT
	O.ID,
	P.ID,
	2,
	25.00
FROM
	ORDERS O,
	PRODUCTS P
WHERE
	O.TOTAL_PRICE = 1250.00
	AND P.NAME = 'Mouse';